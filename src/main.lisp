(in-package :cl-maelstrom)

(defparameter *node-id* nil)
(defparameter *node-ids* nil)
(defparameter *next-message-id* 0)
(defparameter *neighbors* nil)
(defparameter *messages* nil)

;; (serapeum:toggle-pretty-print-hash-table)
(setf yason:*parse-object-as* :alist)
(setf yason:*parse-object-key-fn* (serapeum:op (intern (string-upcase _) "KEYWORD")))
(setf yason:*symbol-encoder* #'yason:encode-symbol-as-lowercase)
(setf yason:*symbol-key-encoder* #'yason:encode-symbol-as-lowercase)
(setf yason:*list-encoder* #'yason:encode-alist)

(defun handle-message-init (message)
  (setf *node-id* (accesses message :body :node_id))
  (plog (format nil "Initialized node ~A~&" *node-id*))
  (setf *node-ids* (coerce (accesses message :body :node_ids) 'vector))
  (reply message (pairlis '(:type) '("init_ok"))))

(defun handle-message-echo (message)
  (let ((body (accesses message :body)))
    (plog (format nil "Echoing ~A~&" body))
    (reply message (progn 
                     (setf (accesses body :type) "echo_ok")
                     body))))

(defun handle-message-topology (message)
  (setf *neighbors* (accesses message :body :topology (intern (string-upcase *node-id*) "KEYWORD")))
  (plog (format nil "My neighbors are ~A~&" *neighbors*))
  (reply message (pairlis '(:type) '("topology_ok"))))

(defun handle-message-read (message)
  (serapeum:synchronized (*messages*)
    (reply message (pairlis '(:type :messages) (list "read_ok" *messages*)))))

(defun handle-message-broadcast (message)
  (let ((m (accesses message :body :message)))
    (serapeum:synchronized (*messages*)
     (unless (member m *messages* :test #'equal)
       (setf *messages* (cons m *messages*))
       (dolist (neighbor *neighbors*)
         (unless (equal neighbor (accesses message :src))
           (send neighbor nil (pairlis '(:type :message) (list "broadcast" m)))))))
    (when (accesses message :body :msg_id)
      (reply message (pairlis '(:type) '("broadcast_ok"))))))

(serapeum.exporting:defun parse-input (line)
  (let ((parsed (yason:parse line)))
    (plog (format nil "Received ~A~&" parsed))
    (alexandria:eswitch ((accesses parsed :body :type) :test #'equal)
      ("init" (handle-message-init parsed))
      ("echo" (handle-message-echo parsed))
      ("topology" (handle-message-topology parsed))
      ("read" (handle-message-read parsed))
      ("broadcast" (handle-message-broadcast parsed)))))
