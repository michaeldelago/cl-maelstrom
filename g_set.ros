#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -s cl-maelstrom -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:bordeaux-threads :calispel :alexandria :serapeum :yason :access) :silent t)
  )

(defpackage :ros.script.g_set.3923605138
  (:use :cl :cl-maelstrom)
  (:import-from :access #:accesses)
  (:import-from :serapeum #:op
                          #:synchronized)
  (:import-from :alexandria #:if-let
                            #:eswitch))
(in-package :ros.script.g_set.3923605138)

(defun plog (log-message)
  (print-stderr (format nil "~:@A~&" log-message)))

(defstruct node
  id
  other-node-ids
  message-set
  scheduled-tasks
  (next-msg-id (bt2:make-atomic-integer)))

(defmethod send ((node node) message)
  (setf (message-src message) (node-id node))
  (print-stdout (format nil "~A~&" (yason:encode message))))

(defmethod reply ((node node) message response)
  (with-slots (body)
    response
    (setf (accesses body :in_reply_to) (accesses message :body :msg_id))
    (setf (accesses body :msg_id) (bt2:atomic-integer-incf (node-next-msg-id node))))
  (send node (message-with-dest (accesses message :src) response)))

(defun handle-init (node message)
  (if (node-id node)
      (plog (format nil "Node ~A already initialized~&" (node-id node)))
      (progn 
        (with-slots (id other-node-ids)
          node
          (setf id (accesses message :body :node_id))
          (setf other-node-ids (accesses message :body :node_ids)))
        (flet ((replicate ()
                 (let ((message-set (synchronized ((node-message-set node)) 
                                                  (copy-list (node-message-set node)))))
                   (when (node-other-node-ids node)
                     (plog (format nil "Replicating current set ~A~&" message-set))
                     (dolist (recipient (node-other-node-ids node))
                       (unless (equal (node-id node) recipient)
                         (send node (message-with-dest recipient 
                                                       (message-replicate message-set)))))))))
          (synchronized ((node-scheduled-tasks node))
                        (push (scheduled-task 5 #'replicate) (node-scheduled-tasks node))))
        (plog (format nil "Initialized Node ~A~&" (node-id node)))
        (reply node message (message-init-ok)))))

(defun handle-read (node message)
  (with-slots (message-set) node
    (synchronized (message-set)
      (reply node message (make-message :body `((:type . "read_ok")
                                                          (:value . ,message-set)))))))

(defun handle-add (node message)
  (with-slots (message-set) node
    (synchronized (message-set)
                  (setf message-set (adjoin (accesses message :body :element) message-set))))
  (reply node message (message-add-ok)))

(defun handle-replicate (node message)
  (with-slots (message-set) node
    (synchronized (message-set)
                  (setf message-set (union message-set (accesses message :body :value))))))

(defmethod parse-input ((node node) line)
  (let ((parsed (yason:parse line)))
    (bt2:make-thread
      (lambda ()
        (plog (format nil "Received ~A~&" parsed)) 
        (eswitch ((accesses parsed :body :type) :test #'equal)
                 ("init" (handle-init node parsed))
                 ("read" (handle-read node parsed))
                 ("add" (handle-add node parsed))
                 ("replicate" (handle-replicate node parsed)))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((node (make-node)))
    (setf cl-maelstrom::*printer* (start-printer))
    (loop for line = (read-line *standard-input* nil :eof)
          until (eq line :eof)
          do (parse-input node line))))
;;; vim: set ft=lisp lisp:
